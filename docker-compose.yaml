networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local

services:
  postgres:
    image: "postgres:17.0"
    container_name: mass_upload_application_database
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: "GMT"
      PGTZ: "GMT"
    ports:
      - "${DB_PORT}:${DB_PORT}"
    tmpfs:
      - /data/postgres
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE} -h 127.0.0.1 -p ${DB_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  backend:
    container_name: "mass_upload_application_api_${NODE_ENV}"
    image: "mass_upload_application_api_${NODE_ENV}"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./backend
      target: "${NODE_ENV}"
      dockerfile: dockerfile
    env_file:
      - .env
    ports:
      - 3000:3000
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  frontend:
    build:
      context: ./frontend
      target: "${NODE_ENV}"
      dockerfile: dockerfile
    container_name: csv_frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "3001:3001"
    networks:
      - app-network
  redis:
    image: redis:7.4-alpine
    container_name: ${REDIS_HOSTNAME}
    command: redis-server --save 300 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
